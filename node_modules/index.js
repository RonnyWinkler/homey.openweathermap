// weather.js - APIs for openweathermap.org

(function(){

  var config = {
    units : 'metric',
    lan : 'en',
    format : 'json',
    APPID : null
  };

  // main settings
  var http = require('http');
  var options = {
    host : 'api.openweathermap.org',
    path: '/data/2.5/weather?q=fairplay',
    withCredentials: false
  };

  var weather = exports;

  // weather(get)  ---------------------------------------------  weather(get)  ---------------------------------------------
  weather.getLang = function(){
    return config.lan;
  };

  weather.getCity = function(){
    return config.city;
  };

  weather.getCoordinate = function(){
    return {
      "latitude": config.latitude,
      "longitude": config.longitude
    };
  };

  weather.getCityId = function(){
    return config.cityId;
  };

  weather.getZipCode = function(){
    return config.zip;
  };

  weather.getUnits = function(){
    return config.units;
  };

  weather.getFormat = function(){
    return config.format;
  };

  weather.getError = function(callback){
     getErr(callback);
  };

  weather.getAPPID = function(){
    return config.APPID;
  };

  // get temperature
  weather.getTemperature = function(callback){
    getTemp(callback);
  };

  // get the atmospheric pressure
  weather.getPressure = function(callback){
    getPres(callback);
  };

  weather.getHumidity = function(callback){
    getHum(callback);
  };

  weather.getDescription = function(callback){
    getDesc(callback);
  };

  weather.getAllWeather = function(callback){
    getData(buildPath(), callback);
  };

  weather.getWeatherForecast = function(callback){
    getData(buildPathForecast(), callback);
  };

  weather.getWeatherForecastForDays = function(days, callback){
    getData(buildPathForecastForDays(days), callback);
  };

    weather.getWeatherForecastForHours = function(hours, callback){
        getData(buildPathForecastForHours(hours), callback);
    };

  weather.getSmartJSON = function(callback){
    getSmart(callback);
  };

  weather.getURLJSON = function(url, callback){
    getURL(url, callback);
  };

 weather.getCoordinateURL = function(settings, callback){
    getCoordinateURL(settings, callback);
  };


  // active functions()  -------------------------------------  active functions()  --------------------------------------------

  function getErr(callback){
    // set new path to throw the http exception
    options.path = 'timetocrash';
    http.get(options, function(err,data){
        return callback(err,data);
    });
  };

  function getPres(callback){
    getData(buildPath(), function(err,jsonObj){
      return callback(err,jsonObj.main.pressure);
    });
  };

  function getTemp(callback){
    getData(buildPath(), function(err,jsonObj){
      return callback(err,jsonObj.main.temp);
    });
  };

  function getHum(callback){
    getData(buildPath(), function(err,jsonObj){
      return callback(err,jsonObj.main.humidity);
    });
  };

  function getDesc(callback){
    getData(buildPath(), function(err,jsonObj){
      return callback(err, (jsonObj.weather)[0].description);
    });
  };

  function getSmart(callback){
    getData(buildPath(), function(err,jsonObj){
      var smartJSON = {};
   try {
      smartJSON.temp = jsonObj.main.temp;
      smartJSON.humidity = jsonObj.main.humidity;
      smartJSON.pressure = jsonObj.main.pressure;
      smartJSON.visibility = jsonObj.visibility;
      smartJSON.clouds = jsonObj.clouds.all;
      smartJSON.description = ((jsonObj.weather[0]).description);
      smartJSON.weathercode = ((jsonObj.weather[0]).id);

      if(jsonObj.wind.speed){
        smartJSON.windspeed = jsonObj.wind.speed;
      }else {
        smartJSON.windspeed = {};
      }

      if(jsonObj.wind.deg){
        smartJSON.windangle = jsonObj.wind.deg;
      }else {
        smartJSON.windangle = null;
      }

      // return the rain in mm if present 
      if(jsonObj.precipitation){
        smartJSON.rain = jsonObj.precipitation.value;
      }else {
        smartJSON.rain = 0;
      }

      if(jsonObj.rain){
        var rain3h = jsonObj.rain;
      //  smartJSON.rain = Math.round(rain3h['3h'] / 3);
        smartJSON.rain = rain3h['3h'] / 3;
      }
      
      return callback(err,smartJSON);
    }catch(error){
            //console.log("No response from OpenWeatherMap API");
            console.log();
          }
    });
  };

  function getURL(url, callback){
    getData(url, function(err,jsonObj){
   try {
      return callback(err,jsonObj);
    }catch(error){
            //console.log("No response from OpenWeatherMap API");
            console.log(error);
          }
    });
  };

  function getCoordinate(){
    var coordinateAvailable = config.latitude && config.longitude;
    var cityAvailable = config.city;
    var cityIdAvailable = config.cityId;
    var coordinateQuery = null;
    //var coordinateQuery = 'q='+config.city;
    if (cityAvailable) { coordinateQuery = 'q='+config.city; 
    } else if (cityIdAvailable) { coordinateQuery = 'id='+config.cityId; 
    } else if (config.zip) { coordinateQuery = 'zip='+config.zip; 
    } else if (coordinateAvailable) { coordinateQuery = 'lat='+config.latitude+'&lon='+config.longitude; 
    } else { return null   }
    return coordinateQuery;
    
  };

  function buildPath(){
    return '/data/2.5/weather?' + getCoordinate() + '&units=' + config.units + '&lang=' + config.lan + '&mode=json&APPID=' + config.APPID;
  };
// 5day/3 hr data, returns up to 32 3 hr intervals with data
  function buildPathForecast(){
    return '/data/2.5/forecast?' + getCoordinate() + '&units=' + config.units + '&lang=' + config.lan + '&mode=json&APPID=' + config.APPID;
  };
// 24 hr data, max. 16
  function buildPathForecastForDays(days){
    return '/data/2.5/forecast/daily?' + getCoordinate() + '&cnt=' + days + '&units=' + config.units + '&lang=' + config.lan + '&mode=json&APPID=' + config.APPID;
  };
// not supported (anymore)
/*  function buildPathForecastForHours(hours) {
      return '/data/2.5/forecast/hour?' + getCoordinate() + '&cnt=' + hours + '&units=' + config.units + '&lang=' + config.lan + '&mode=json&APPID=' + config.APPID;
  };
*/

  function getData(url, callback, tries){
    options.path = url;
    http.get(options, function(res){
      var chunks = '';
      res.on('data', function(chunk) {
          chunks += chunk;
      });
      res.on('end', function () {
          var parsed = {};

          if (!chunks && (!tries || tries < 3)) {
              return getData(url, callback, (tries||0)+1);
          }

          // Try-Catch added by Mikael Aspehed
          try{
            parsed = JSON.parse(chunks)
          }catch(e){
            parsed = {error:e}
          }

          return callback(null,parsed);
      });

      res.on('error', function(err){
          return callback(err, null);
      });
    });
  };

      weather.getURLCurrent = function getURL(settings) {
            return new Promise((resolve, reject) => {
                getCoordinateURLCurrent(settings,
                    (error, url) => {
                        if (url) {
                            resolve(url);
                        } else {
                            reject(error);
                        }
                    });
            });
        }

  function getCoordinateURLCurrent(settings,callback){
    var cityAvailable = settings["GEOlocationCity"];
    var ZipCodeAvailable = settings["GEOlocationZip"];
    var coordinateQuery = null;
    var forecastInterval = settings["forecastInterval"];
    if (cityAvailable) { coordinateQuery = 'q='+settings["GEOlocationCity"];
    } else if (ZipCodeAvailable) { coordinateQuery = 'zip='+settings["GEOlocationZip"];
    } else { coordinateQuery = 'lat='+settings['lat']+'&lon='+settings['lon']; }
   if (forecastInterval == 0) {
    var url = '/data/2.5/weather?' + coordinateQuery + '&units=' + settings['units'] + '&lang=' + settings['language'] + '&mode=json&APPID=' +  settings["APIKey"];
    } else {
    var url = '/data/2.5/forecast?' + coordinateQuery + '&cnt=' + forecastInterval + '&units=' + settings['units'] + '&lang=' + settings['language'] + '&mode=json&APPID=' +  settings["APIKey"];
    }

    return callback(null, url);
  };

      weather.getURLHourly = function getURL(settings) {
            return new Promise((resolve, reject) => {
                getCoordinateURLHourly(settings,
                    (error, url) => {
                        if (url) {
                            resolve(url);
                        } else {
                            reject(error);
                        }
                    });
            });
        }

  function getCoordinateURLHourly(settings,callback){
    var cityAvailable = settings["GEOlocationCity"];
    var ZipCodeAvailable = settings["GEOlocationZip"];
    var coordinateQuery = null;
    var forecastInterval = settings["forecastInterval"];
    if (cityAvailable) { coordinateQuery = 'q='+settings["GEOlocationCity"];
    } else if (ZipCodeAvailable) { coordinateQuery = 'zip='+settings["GEOlocationZip"];
    } else { coordinateQuery = 'lat='+settings['lat']+'&lon='+settings['lon']; }
 //   var url = '/data/2.5/forecast?' + coordinateQuery + '&cnt=' + forecastInterval + '&units=' + settings['units'] + '&lang=' + settings['language'] + '&mode=json&APPID=' +  settings["APIKey"];
    var url = '/data/2.5/forecast?' + coordinateQuery + '&cnt=' + '&units=' + settings['units'] + '&lang=' + settings['language'] + '&mode=json&APPID=' +  settings["APIKey"];
    return callback(null, url);
  };

      weather.getWeatherData = function getWeatherData(url) {
            return new Promise((resolve, reject) => {
                weather.getURLJSON(url,
                    (error, smart) => {
                        if (smart) {
                            resolve(smart);
                        } else {
                            reject(error);
                        }
                    });
            });
        }


})();
