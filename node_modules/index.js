// weather.js - APIs for openweathermap.org
(function() {

    var config = {
        units: 'metric',
        lan: 'en',
        format: 'json',
        APPID: null
    };

    //  host : 'api.openweathermap.org',

    // main settings
    var http = require('http');
    var options = {
        host: 'api.openweathermap.org',
        path: '/data/2.5/weather?q=fairplay',
        withCredentials: false
    };

    var weather = exports;

    // active functions()  -------------------------------------  active functions()  --------------------------------------------


    weather.getURLCurrent = function getURL(settings) {
        return new Promise((resolve, reject) => {
            getCoordinateURLCurrent(settings, (error, url) => {
                if (url) {
                    resolve(url);
                } else {
                    reject(error);
                }
            });
        });
    }

    weather.getURLHourly = function getURL(settings) {
        return new Promise((resolve, reject) => {
            getCoordinateURLHourly(settings, (error, url) => {
                if (url) {
                    resolve(url);
                } else {
                    reject(error);
                }
            });
        });
    }

    weather.getWeatherData = function getWeatherData(url) {
        return new Promise((resolve, reject) => {
            getData(url, (error, jsonobj) => {
                if (jsonobj) {
                    resolve(jsonobj);
                } else {
                    reject(error);
                }
            });
        });
    }

    function getCoordinateURLCurrent(settings, callback) {
        var cityAvailable = settings["GEOlocationCity"];
        var ZipCodeAvailable = settings["GEOlocationZip"];
        var coordinateQuery = null;
        var forecastInterval = settings["forecastInterval"];
        if (cityAvailable) {
            coordinateQuery = 'q=' + settings["GEOlocationCity"];
        } else if (ZipCodeAvailable) {
            coordinateQuery = 'zip=' + settings["GEOlocationZip"];
        } else {
            coordinateQuery = 'lat=' + settings['lat'] + '&lon=' + settings['lon'];
        }
            var url = '/data/2.5/weather?' + coordinateQuery + '&units=' + settings['units'] + '&lang=' + settings['language'] + '&mode=json&APPID=' + settings["APIKey"];

        return callback(null, url);
    };

    function getCoordinateURLHourly(settings, callback) {
        var cityAvailable = settings["GEOlocationCity"];
        var ZipCodeAvailable = settings["GEOlocationZip"];
        var coordinateQuery = null;
        var forecastInterval = settings["forecastInterval"];
        if (cityAvailable) {
            coordinateQuery = 'q=' + settings["GEOlocationCity"];
        } else if (ZipCodeAvailable) {
            coordinateQuery = 'zip=' + settings["GEOlocationZip"];
        } else {
            coordinateQuery = 'lat=' + settings['lat'] + '&lon=' + settings['lon'];
        }
        //   var url = '/data/2.5/forecast?' + coordinateQuery + '&cnt=' + forecastInterval + '&units=' + settings['units'] + '&lang=' + settings['language'] + '&mode=json&APPID=' +  settings["APIKey"];
        var url = '/data/2.5/forecast?' + coordinateQuery + '&units=' + settings['units'] + '&lang=' + settings['language'] + '&mode=json&APPID=' + settings["APIKey"];
        return callback(null, url);
    };

    function getData(url, callback, tries) {
        options.path = url;
        var DATA = http.get(options, (res) => {
            var chunks = '';
            res.on('data', (chunk) => {
                chunks += chunk;
            });
            res.on('end', () => {
                var parsed = {};

                if (!chunks && (!tries || tries < 3)) {
                    return getData(url, callback, (tries || 0) + 1);
                }

                // Try-Catch added by Mikael Aspehed
                try {
                    parsed = JSON.parse(chunks)
                } catch (e) {
                    parsed = {
                        error: e
                    }
                }

                return callback(null, parsed);
            });

            res.on('error', (err) => {
                console.log(`problem with request: ${err.message}`);
            });
        });

        DATA.on('error', (err) => {
            console.log(`problem with request: ${err.message}`);
        });
    };


})();
