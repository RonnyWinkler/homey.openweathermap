// weather.js - APIs for openweathermap.org
(function () {

    var config = {
        units: 'metric',
        lan: 'en',
        format: 'json',
        APPID: null
    };

    // main settings
    var http = require('http');
    var options = {
        host: 'api.openweathermap.org',
        path: '/data/2.5/weather?q=fairplay',
        withCredentials: false
    };

    /*    var http = require('http.min');
        var options = {
            protocol: 'https:',
            hostname: 'api.openweathermap.org',
            path: '/data/2.5/weather?q=fairplay',
            headers: {
                'User-Agent': 'Node.js http.min'
              }
        }; */

    var weather = exports;

    // active functions()  -------------------------------------  active functions()  --------------------------------------------

    weather.getURLCurrent = function getURL(settings) {
        return new Promise((resolve, reject) => {
            getCoordinateURLCurrent(settings, (error, url) => {
                if (url) {
                    resolve(url);
                } else {
                    reject(error);
                }
            });
        });
    }

    weather.getURLHourly = function getURL(settings) {
        return new Promise((resolve, reject) => {
            getCoordinateURLHourly(settings, (error, url) => {
                if (url) {
                    resolve(url);
                } else {
                    reject(error);
                }
            });
        });
    }

    weather.getURLDaily = function getURL(settings) {
        return new Promise((resolve, reject) => {
            getCoordinateURLDaily(settings, (error, url) => {
                if (url) {
                    resolve(url);
                } else {
                    reject(error);
                }
            });
        });
    }
    weather.getWeatherData = function getWeatherData(url) {
        return new Promise((resolve, reject) => {
            getData(url, (error, jsonobj) => {
                if (jsonobj) {
                    resolve(jsonobj);
                } else {
                    reject(error);
                }
            });
        });
    }

    weather.conditionToString = function conditionToString(conditioncode) {
        // seems arguments are in english by default
        var conditions = {
            0: 'undefined',
            1: 'undefined',
            2: 'Thunderstorm',
            3: 'Drizzle',
            4: 'undefined',
            5: 'Rain',
            6: 'Snow',
            6: 'Misty',
            8: 'Clouds',
            9: 'Extreme',
            800: 'Clear',
        }

        if (conditioncode == 800) {
            var conditionString = conditions[800];
        } else {
            var intfirstDigit = Math.floor(conditioncode / 100);
            var conditionString = conditions[intfirstDigit];
            //this.log("conditionString current conditions: " + conditionString);
        }
        return conditionString;
    }

    weather.beaufortFromKmh = function beaufortFromKmh(kmh) {
        var beaufortKmhLimits = [1, 6, 11, 19, 30, 39, 50, 61, 74, 87, 102, 117, 177, 249, 332, 418, 512];
        // undefined for negative values...
        if (kmh < 0 || kmh == undefined) return undefined;

        var beaufortNum = beaufortKmhLimits.reduce(function (previousValue, currentValue, index, array) {
            return previousValue + (kmh > currentValue ? 1 : 0);
        }, 0);
        return beaufortNum;
    }

    weather.beaufortFromMph = function beaufortFromMph(mph) {
        var beaufortMphLimits = [1, 4, 8, 13, 19, 25, 32, 39, 47, 55, 64, 73, 111, 155, 208, 261, 320];
        // undefined for negative values...
        if (mph < 0 || mph == undefined) return undefined;

        var beaufortNum = beaufortMphLimits.reduce(function (previousValue, currentValue, index, array) {
            return previousValue + (mph > currentValue ? 1 : 0);
        }, 0);
        return beaufortNum;
    }

        weather.degToCompass = function degToCompass(settings, num) {
        while (num < 0) num += 360;
        while (num >= 360) num -= 360;
        var val = Math.round((num - 11.25) / 22.5);
        if (settings['language'] == "nl") {
            var arr = ["N", "NNO", "NO", "ONO", "O", "OZO", "ZO", "ZZO", "Z", "ZZW", "ZW", "WZW", "W", "WNW", "NW", "NNW"];
        } else {
            var arr = ["N", "NNE", "NE", "ENE", "E", "ESE", "SE", "SSE", "S", "SSW", "SW", "WSW", "W", "WNW", "NW", "NNW"];
        }
        return arr[Math.abs(val)];
    }

    function getCoordinateURLCurrent(settings, callback) {
        var cityAvailable = settings["GEOlocationCity"];
        var ZipCodeAvailable = settings["GEOlocationZip"];
        var coordinateQuery = null;
        var forecastInterval = settings["forecastInterval"];
        if (cityAvailable) {
            coordinateQuery = 'q=' + settings["GEOlocationCity"];
        } else if (ZipCodeAvailable) {
            coordinateQuery = 'zip=' + settings["GEOlocationZip"];
        } else {
            coordinateQuery = 'lat=' + settings['lat'] + '&lon=' + settings['lon'];
        }
        var url = '/data/2.5/weather?' + coordinateQuery + '&units=' + settings['units'] + '&lang=' + settings['language'] + '&mode=json&APPID=' + settings["APIKey"];
        return callback(null, url);
    };

    function getCoordinateURLHourly(settings, callback) {
        var cityAvailable = settings["GEOlocationCity"];
        var ZipCodeAvailable = settings["GEOlocationZip"];
        var coordinateQuery = null;
        if (cityAvailable) {
            coordinateQuery = 'q=' + settings["GEOlocationCity"];
        } else if (ZipCodeAvailable) {
            coordinateQuery = 'zip=' + settings["GEOlocationZip"];
        } else {
            coordinateQuery = 'lat=' + settings['lat'] + '&lon=' + settings['lon'];
        }
        var url = '/data/2.5/forecast?' + coordinateQuery + '&units=' + settings['units'] + '&lang=' + settings['language'] + '&mode=json&APPID=' + settings["APIKey"];
        return callback(null, url);
    };

    function getCoordinateURLDaily(settings, callback) {
        var cityAvailable = settings["GEOlocationCity"];
        var ZipCodeAvailable = settings["GEOlocationZip"];
        var coordinateQuery = null;
        var forecastInterval = settings["forecastInterval"];
        if (cityAvailable) {
            coordinateQuery = 'q=' + settings["GEOlocationCity"];
        } else if (ZipCodeAvailable) {
            coordinateQuery = 'zip=' + settings["GEOlocationZip"];
        } else {
            coordinateQuery = 'lat=' + settings['lat'] + '&lon=' + settings['lon'];
        }
        var url = '/data/2.5/forecast/daily?' + coordinateQuery + '&units=' + settings['units'] + '&lang=' + settings['language'] + '&mode=json&APPID=' + settings["APIKey"] + '&cnt=16';
        return callback(null, url);
    };

    /*   function getData(url, callback){
         options.path = url;
         http.json(options).then(data => {
             //this.log(data)
             return callback(null, data);
         })
         .catch(err => {
             console.log(`problem with request: ${err.message}`);
         });
     } */

    function getData(url, callback, tries) {
        options.path = url;
        var DATA = http.get(options, (res) => {
            var chunks = '';
            res.on('data', (chunk) => {
                chunks += chunk;
            });
            res.on('end', () => {
                var parsed = {};

                if (!chunks && (!tries || tries < 3)) {
                    return getData(url, callback, (tries || 0) + 1);
                }

                // Try-Catch added by Mikael Aspehed
                try {
                    parsed = JSON.parse(chunks)
                } catch (e) {
                    parsed = {
                        error: e
                    }
                }

                return callback(null, parsed);
            });

            res.on('error', (err) => {
                console.log(`problem with request: ${err.message}`);
            });
        });

        DATA.on('error', (err) => {
            console.log(`problem with request: ${err.message}`);
        });
    };


})();